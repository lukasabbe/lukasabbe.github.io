---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';

// Example API fetch - replace with your actual API
let totalDownloads = 0;
let apiError = false;

try {
  // Example: Fetching from a hypothetical mod downloads API
  const response = await fetch('https://api.modrinth.com/v2/user/QCe37V9V/projects');
  
  if (response.ok) {
    const data = await response.json();
    totalDownloads = data.reduce((sum: any, mod: any) => sum + (mod.downloads || 0), 0);
  } else {
    throw new Error('API request failed');
  }
} catch (error) {
  console.error('Failed to fetch mod downloads:', error);
  apiError = true;
  totalDownloads = 1250; // Fallback value
}

// You can also fetch multiple APIs
let githubStats = null;
try {
  // Example: GitHub API (no auth needed for public repos)
  const githubResponse = await fetch('https://api.github.com/users/lukasabbe');
  if (githubResponse.ok) {
    githubStats = await githubResponse.json();
  }
} catch (error) {
  console.error('Failed to fetch GitHub stats:', error);
}
---

<Layout>
	<Header activePage="home" />
	
	<main class="main">
		<h1>Hi, I am Lukas</h1>
		<p>I live in Link√∂ping, Sweden, and I'm studying Software Engineering at LIU. <br> In my spare time, I love working on small development projects, mainly Minecraft modding and Discord bot development.</p>
		<h2>Programing languages</h2>
		<ul>
			<li>Java</li>
			<li>JavaScript/TypeScript</li>
			<li>Python</li>
			<li>C#</li>
			<li>C++/C</li>
			<li>HTML/CSS</li>
			<li>SQL</li>
		</ul>
		<h2>Stats</h2>
		<div class="stats">
			<div class="stat-item">
				<span class="stat-label">Total mod downloads:</span>
				<span class="stat-value">
					{totalDownloads}
					{apiError && <span class="stat-note">*</span>}
				</span>
			</div>
			{githubStats && (
				<div class="stat-item">
					<span class="stat-label">GitHub repositories:</span>
					<span class="stat-value">{githubStats.public_repos}</span>
				</div>
				<div class="stat-item">
					<span class="stat-label">GitHub followers:</span>
					<span class="stat-value">{githubStats.followers}</span>
				</div>
			)}
			{apiError && (
				<p class="stat-disclaimer">* Data may not be current due to API limitations</p>
			)}
		</div>
	</main>
</Layout>

<style>
	.main {
		text-align: center;
		padding: 4rem 2rem;
		max-width: 800px;
		margin: 0 auto;
	}

	.main h1 {
		font-size: 3rem;
		margin-bottom: 1rem;
		background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-clip: text;
	}

	.main h2 {
		font-size: 2rem;
		margin-top: 2rem;
		margin-bottom: 1rem;
		background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-clip: text;
	}

	.main p {
		font-size: 1.2rem;
		color: #666;
	}

	.main ul {
		list-style: none;
		padding: 0;
		margin: 2rem 0;
		display: flex;
		flex-wrap: wrap;
		justify-content: center;
		gap: 1rem;
		max-width: 600px;
		margin-left: auto;
		margin-right: auto;
	}

	.main li {
		background: linear-gradient(135deg, #3F72AF 0%, #577597 100%);
		color: white;
		padding: 0.75rem 1.5rem;
		border-radius: 25px;
		font-weight: 600;
		font-size: 1rem;
		box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
		transition: all 0.3s ease;
		cursor: default;
	}

	.main li:hover {
		transform: translateY(-2px);
		box-shadow: 0 6px 16px rgba(102, 126, 234, 0.4);
	}

	.stats {
		margin: 2rem 0;
		display: flex;
		flex-direction: column;
		gap: 1rem;
		max-width: 400px;
		margin-left: auto;
		margin-right: auto;
	}

	.stat-item {
		display: flex;
		justify-content: space-between;
		align-items: center;
		background: rgba(255, 255, 255, 0.1);
		padding: 1rem 1.5rem;
		border-radius: 12px;
		border-left: 4px solid #667eea;
		backdrop-filter: blur(10px);
		box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
	}

	.stat-label {
		font-weight: 500;
		color: #555;
	}

	.stat-value {
		font-weight: 700;
		font-size: 1.1rem;
		color: #667eea;
	}

	.stat-note {
		color: #ff6b6b;
		font-size: 0.9rem;
		margin-left: 0.25rem;
	}

	.stat-disclaimer {
		font-size: 0.8rem;
		color: #888;
		text-align: center;
		margin-top: 0.5rem;
		font-style: italic;
	}

	:global(.dark-theme) .main p {
		color: #ffffff;
	}

	:global(.dark-theme) .main li {
		background: linear-gradient(135deg, #4a5568 0%, #2d3748 100%);
		box-shadow: 0 4px 12px rgba(74, 85, 104, 0.3);
	}

	:global(.dark-theme) .main li:hover {
		box-shadow: 0 6px 16px rgba(74, 85, 104, 0.4);
	}

	:global(.dark-theme) .stat-item {
		background: rgba(255, 255, 255, 0.05);
		border-left-color: #9f7aea;
	}

	:global(.dark-theme) .stat-label {
		color: #ccc;
	}

	:global(.dark-theme) .stat-value {
		color: #9f7aea;
	}

	:global(.dark-theme) .stat-disclaimer {
		color: #aaa;
	}

	@media (max-width: 768px) {
		.main {
			padding: 2rem 1rem;
		}
		
		.main h1 {
			font-size: 2rem;
			margin-bottom: 1rem;
		}

		.main h2 {
			font-size: 1.5rem;
			margin-top: 1.5rem;
			margin-bottom: 0.75rem;
		}
		
		.main p {
			font-size: 1.1rem;
			line-height: 1.6;
		}

		.main ul {
			gap: 0.75rem;
			margin: 1.5rem 0;
		}

		.main li {
			padding: 0.6rem 1.2rem;
			font-size: 0.9rem;
		}

		.stats {
			margin: 1.5rem 0;
			max-width: 100%;
		}

		.stat-item {
			padding: 0.75rem 1rem;
			flex-direction: column;
			gap: 0.25rem;
			text-align: center;
		}

		.stat-value {
			font-size: 1rem;
		}
	}

	@media (max-width: 480px) {
		.main {
			padding: 1.5rem 0.75rem;
		}
		
		.main h1 {
			font-size: 1.75rem;
		}
		
		.main h2 {
			font-size: 1.25rem;
			margin-top: 1rem;
			margin-bottom: 0.5rem;
		}

		.main p {
			font-size: 1rem;
			line-height: 1.5;
		}

		.main ul {
			gap: 0.5rem;
			margin: 1rem 0;
		}

		.main li {
			padding: 0.5rem 1rem;
			font-size: 0.8rem;
		}

		.stats {
			margin: 1rem 0;
		}

		.stat-item {
			padding: 0.5rem 0.75rem;
		}

		.stat-label,
		.stat-value {
			font-size: 0.9rem;
		}
	}
</style>
